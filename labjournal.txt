Labjournal

Antibiotic resistance

1) Getting data

Downloaded the data to the dir ./data

a) Getting the reference sequence of the parental (unevolved, not resistant to antibiotics) E. coli strain
$ wget https://ftp.ncbi.nlm.nih.gov/genomes/genbank/bacteria/Escherichia_coli/reference/GCA_000005845.2_ASM584v2/GCA_000005845.2_ASM584v2_cds_from_genomic.fna.gz
$ wget https://ftp.ncbi.nlm.nih.gov/genomes/genbank/bacteria/Escherichia_coli/reference/GCA_000005845.2_ASM584v2/GCA_000005845.2_ASM584v2_genomic.gff.gz

Unzipping:
$ gunzip GCA_000005845.2_ASM584v2_cds_from_genomic.fna.gz
$ gunzip GCA_000005845.2_ASM584v2_genomic.gff.gz

b) Getting raw Illumina sequencing reads from shotgun sequencing of an E. coli strain that is resistant to the antibiotic ampicillin
downloaded from https://figshare.com/articles/dataset/amp_res_2_fastq_zip/10006541, copied to the wd

Unzipping:
$ gunzip amp_res_1.fastq.gz
$ gunzip amp_res_2.fastq.gz

Went back to the dir antibiotic-resistance

$ cd ../

2) Manual inspection of the raw sequencing data

a) Abserving how does the data look like

$ head -20 ./data/amp_res_1.fastq

@SRR1363257.37 GWZHISEQ01:153:C1W31ACXX:5:1101:14027:2198 length=101
GGTTGCAGATTCGCAGTGTCGCTGTTCCAGCGCATCACATCTTTGATGTTCACGCCGTGGCGTTTAGCAATGCTTGAAAGCGAATCGCCTTTGCCCACACG
+
@?:=:;DBFADH;CAECEE@@E:FFHGAE4?C?DE<BFGEC>?>FHE4BFFIIFHIBABEECA83;>>@>@CCCDC9@@CC08<@?@BB@9:CC#######
@SRR1363257.46 GWZHISEQ01:153:C1W31ACXX:5:1101:19721:2155 length=101
GTATGAGGTTTTGCTGCATTCTCTGNGCGAATATTAACTCCNTNNNNNTTATAGTTCAAAGCAAGTACCTGTCTCTTATACACATCTCCGAGCCCACGAGC
+
@@<?=D?D==?<AFGDF+AIHEACH#22<:?E8??:9??GG#0#####000;CF=C)4.==CA@@@)=7?C7?E37;3@>;;(.;>AB#############
@SRR1363257.77 GWZHISEQ01:153:C1W31ACXX:5:1101:5069:2307 length=101
GCTTCTCTTAACTGAGGTCACCATCATGCCGTTAAGTCCCTACCTCTCTTTTGCCGGTAACTGTTCCGCCGCGATTGCCTTTTATCTGTCTCTTATACACC
+
??<DBD;4C2=<BB>:AC;<CF<CE@FE9@E1C@891CD*9:?:3D@DD4?D<DD:0;@A=AEIDDA##################################
@SRR1363257.78 GWZHISEQ01:153:C1W31ACXX:5:1101:5178:2440 length=101
GCATAAGGACGATCGCTCCAGAGTAAAATAAATACGCGCATGTGATACTCACAATACCAATGGTGAAGTTACGGGACTTAAACAAACTGAGATCAAGAATC
+
CCCFFFFFHHHHHJJJJJJJJJJFFHIJJJJJJJJJJJJJJJJJJJJJJJIJHHHHHHFDEDF;AEEEEEEDDDDDBBACDDDCDDDDCCDDDDDDCCDC3
@SRR1363257.96 GWZHISEQ01:153:C1W31ACXX:5:1101:6707:2460 length=101
TCATTAAGCCGTGGTGGATGTGCCATAGCGCACCGCAAAGTTAAGAAACCGAATATTGGGTTTAGTCTTGTTTCATAATTGTTGCAATGAAACGCGGTGAA
+
CCCFFFFFHHHHHJHIIJIIIIJJJJJJGIJJJJJIJJIIGHJJJJJIIJJDHFFFFFEDACDDDCDDDDCCDDECACCDCCCDACDDDDCCDDDDDBD@A

$ head -20 ./data/amp_res_2.fastq

@SRR1363257.37 GWZHISEQ01:153:C1W31ACXX:5:1101:14027:2198 length=101
GATCTAAGCTGAAGCCAGGCCAAAGTTTGACGATTGGTGCAGGCAGTAGCGCACAGCGACTGGCAAACAACAGCGATAGCATTACGTATCGTGTGCGCAAA
+
???BDB:DFHBFD@9;;+A;AFGH;ABHFHHGE@9:B:??@D>@;F?D8<<F8AA9EHHD8'..;5?A?A992(',(59CC3@C>22::A238+2>B<>B<
@SRR1363257.46 GWZHISEQ01:153:C1W31ACXX:5:1101:19721:2155 length=101
GTACTTGCTTTGNACTATAATATGCACGGAGNTAATATTCGCTCAGAGAATGCAGCAAAACCTCATACCTGTCTCTTATACACATCTGACGCTGCCGACGA
+
;@@DB?B;CFBB#2<:CB:FH<C@:<A?C::#1:86:BG9:8?8688?888EBF;783)=6-7=CC;ECD);?7;;>>AE;>(5;->AC@;B@;8?#####
@SRR1363257.77 GWZHISEQ01:153:C1W31ACXX:5:1101:5069:2307 length=101
ATAATAGGCAATCGCGTCGGAACAGTTACCGGCCAAAGAGAGGCAGGGACTTAACGGCATGATGGTGACCTCAGTTAAGAGAAGCCTGTCTCTTATACACA
+
+=?;:2,+A++AC:C:2@F6:CD:B09B?4)8@''8=))8=;=((5=4@?;@6;@?@BB;(535::>:>3(::(44:@::@3((9<32+::@(4@4+:>C3
@SRR1363257.78 GWZHISEQ01:153:C1W31ACXX:5:1101:5178:2440 length=101
ATATTAACAGTAGTATCAGTTATTTCTCTGATCTCTTTAGTCATTTGGGAGTCGACCTCAGAGAACCCGATTCTTGATCTCAGTTTGTTTAAGTCCCGTAA
+
BCCFFFFFHHHHHHIJJIJJJJJIJJJJIJGIJJJJJJIJHIHJJIJIIGGGHIJIJJJIJIJJJJJJJGHHHHHFFFFFFEEEFEEED?AACCDCCDDDB
@SRR1363257.96 GWZHISEQ01:153:C1W31ACXX:5:1101:6707:2460 length=101
GTTTCACCGCGTTTCATTGCAACAATTATGAAACAAGACTAAACCCAATATTCGGTTTCTTAACTTTGCGGTGCGCTATGGCACATCCACCACGGCTTAAT
+
CCCFFFFFHGHHHJIJJJJJJIJJJJJJIJIJJIJJIJIJJJJJJJJIJJFHIIJFIGJJJGIHHHHHGFFDDDDDDDDDDDDDDDDDDDABDDDDDDDCD

b) To open the whole file use

$ vim file_name.fastq

c) Counting lines in fastq:

$ wc -l ./data/amp_res_1.fastq
1823504 ./data/amp_res_1.fastq

$ wc -l ./data/amp_res_2.fastq
1823504 ./data/amp_res_2.fastq

3) Inspection of the  raw sequencing data with fastqc

installing the program directly from the repository
$ sudo apt-get install fastqc
$ fastqc -h

fastqc -o /target_dir  /pathtofile1/file1.fastq /pathtofile2/file2.fastq
$ fastqc -o . ./data/amp_res_1.fastq ./data/amp_res_2.fastq

a) amp_res_1_fastqc.html:

Basic Statistics: 455876 sequences, 455876 = 1823504/4, so the number of reads it the same

The red curcles:
- Per base sequence quality (calls of poor quality (red))
The quality of calls on most platforms will degrade as the run progresses, so it is common to see base calls falling into the orange area towards the end of a read.
- Per tile sequence quality (a loss in quality associated with some parts of of the Illumina flowcell)

There are some unusial points:
- Per base sequence content
- Per sequence GC content

All other features are ok

b) amp_res_2_fastqc.html:

Basic Statistics: 455876 sequences, 455876 = 1823504/4, so the number of reads it the same

The red curcles:
- Per base sequence quality (calls of poor quality (red))
The quality of calls on most platforms will degrade as the run progresses, so it is common to see base calls falling into the orange area towards the end of a read.

There are some unusial points:
- Per tile sequence quality
- Per base sequence content
- Per sequence GC content

All other features are ok

4) Filtering the reads

a) Installing the trimming program called Trimmomatic http://www.usadellab.org/cms/?page=trimmomatic
$ sudo apt install trimmomatic
$ TrimmomaticPE

b) the path
$ dpkg -L trimmomatic
/usr/share/java/trimmomatic.jar

c) Running Trimmomatic in paired end mode, with following parameters:

Created a dir for filtered data:
$ mkdir ./filtered_data

- Cut bases off the start of a read if quality below 20
- Cut bases off the end of a read if quality below 20
- Trim reads using a sliding window approach, with window size 10 and average quality  within the window 20.
- Drop the read if it is below length 20.

$ java -jar /usr/share/java/trimmomatic.jar PE -phred33 ./data/amp_res_1.fastq.gz ./data/amp_res_2.fastq.gz amp_res_1_paired.fastq.gz amp_res_1_unpaired.fastq.gz amp_res_2_paired.fastq.gz amp_res_2_unpaired.fastq.gz LEADING:20 TRAILING:20 SLIDINGWINDOW:10:20 MINLEN:20

Input Read Pairs: 455876 Both Surviving: 446259 (97,89%) Forward Only Surviving: 9216 (2,02%) Reverse Only Surviving: 273 (0,06%) Dropped: 128 (0,03%)


$ wc -l amp_res_1_paired.fastq
1785036 amp_res_1_paired.fastq
1785036/4 = 446259

$ wc -l amp_res_2_paired.fastq
1785036 amp_res_2_paired.fastq
1785036/4 = 446259

d) Inspection of the filtered data with fastqc

$ fastqc -o . ./amp_res_1_paired.fastq ./amp_res_2_paired.fastq

 amp_res_1_paired_fastqc.html:

Basic Statistics: 446259 sequences, 446259 = 1785036/4, so the number of reads it the same

The red curcles:
- Per tile sequence quality (a loss in quality associated with some parts of of the Illumina flowcell). We can not fix it because it depend on the tile

Per base sequence quality is ok now

The orange curcles:
- Per base sequence content
- Per sequence GC content
- Sequence Length Distribution

All other features are still ok

amp_res_2_fastqc.html:

Basic Statistics: 446259 sequences, 446259 = 1785036/4, so the number of reads it the same

No red curcles anymore

The orange curcles:
- Per tile sequence quality
- Per base sequence content
- Per sequence GC content
- Sequence Length Distribution

e) Changing the quality score to 30

$ java -jar /usr/share/java/trimmomatic.jar PE -phred33 ./data/amp_res_1.fastq.gz ./data/amp_res_2.fastq.gz amp_res_1_2_paired.fastq.gz amp_res_1_2_unpaired.fastq.gz amp_res_2_2_paired.fastq.gz amp_res_2_2_unpaired.fastq.gz LEADING:30 TRAILING:30 SLIDINGWINDOW:10:30 MINLEN:20

Input Read Pairs: 455876 Both Surviving: 376340 (82,55%) Forward Only Surviving: 33836 (7,42%) Reverse Only Surviving: 25307 (5,55%) Dropped: 20393 (4,47%)
TrimmomaticPE: Completed successfully

$ wc -l amp_res_1_paired.fastq
1505360 amp_res_1_2_paired.fastq
1505360/4 = 376340

$ wc -l amp_res_2_2_paired.fastq
1505360 amp_res_1_2_paired.fastq
1505360/4 = 376340

Fewer reads survive

Inspection of the filtered data with fastqc

$ fastqc -o . ./amp_res_1_2_paired.fastq ./amp_res_2_2_paired.fastq

amp_res_1_2_paired_fastqc.html:

Basic Statistics: 376340 sequences, 376340 = 1505360/4, so the number of reads it the same

The red curcles:
- Per tile sequence quality (a loss in quality associated with some parts of of the Illumina flowcell). We can not fix it because it depend on the tile

Per base sequence quality is ok now

The orange curcles:
- Per base sequence content
- Per sequence GC content
- Sequence Length Distribution

All other features are still ok

amp_res_2_2_fastqc.html:

Basic Statistics: 446259 sequences, 446259 = 1785036/4, so the number of reads it the same

No red curcles anymore

The orange curcles:
- Per tile sequence quality
- Per base sequence content
- Sequence Length Distribution

So we miss more data without critical improvement of the quality

5. Aligning sequences to reference

a) Installing aligner

$ brew install bwa

b) Indexing the reference file
$ bwa index ./data/GCA_000005845.2_ASM584v2_cds_from_genomic.fna

c) Aligning reads
$ bwa mem ./data/GCA_000005845.2_ASM584v2_cds_from_genomic.fna ./filtered_data/qual_score_20/amp_res_1_paired.fastq ./filtered_data/qual_score_20/amp_res_2_paired.fastq > alignment.sam

d) Compressing SAM file

Installing samtools
$ brew install samtools

Compressing SAM file
$ samtools view -S -b alignment.sam > alignment.bam

Basic statistics:
$ samtools flagstat alignment.bam
The output:

879796 + 0 in total (QC-passed reads + QC-failed reads)
0 + 0 secondary
258 + 0 supplementary
0 + 0 duplicates
878688 + 0 mapped (99.87% : N/A)
879538 + 0 paired in sequencing
439769 + 0 read1
439769 + 0 read2
875578 + 0 properly paired (99.55% : N/A)
877468 + 0 with itself and mate mapped
962 + 0 singletons (0.11% : N/A)
0 + 0 with mate mapped to a different chr
0 + 0 with mate mapped to a different chr (mapQ>=5)
99.87% of reads are mapped. It's good result.

e) Sorting and indexing BAM file

Sorting bam file by sequence coordinate on reference 
$ samtools sort alignment.bam -o alignment_sorted.bam

Indexing bam file for faster search
$ samtools index alignment_sorted.bam

d) Visualizing in IGV
$ igv

6. Variant calling

a) Creating mpileup
$ samtools mpileup -f ./data/genome/GCA_000005845.2_ASM584v2_genomic.fna ./alignment/alignment_sorted.bam > ./varscan/my.mpileup

b) Calling VarScan

I use 0.8 for -min-var-frequency option

$ java -jar ../VarScan.v2.4.4.jar mpileup2snp ./varscan/my.mpileup --min-var-freq 0.8 --variants --output-vcf 1 > ./varscan/VarScan_results.vcf

Result:

4641430 bases in pileup file
9 variant positions (6 SNP, 3 indel)
1 were failed by the strand-filter
5 variant positions reported (5 SNP, 0 indel)

